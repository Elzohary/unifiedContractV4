// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnifiedContract.Persistence;

#nullable disable

namespace UnifiedContract.Persistence.Migrations
{
    [DbContext(typeof(UnifiedContractDbContext))]
    [Migration("20250721124515_FinalStaticSeedData")]
    partial class FinalStaticSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDefault");

                    b.HasIndex("IsPublic");

                    b.HasIndex("IsSystem");

                    b.HasIndex("Module");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Module", "IsDefault");

                    b.HasIndex("OwnerId", "IsPublic");

                    b.ToTable("Dashboard", "Analytics");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.DashboardUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("CanEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CanEdit");

                    b.HasIndex("DashboardId");

                    b.HasIndex("UserId");

                    b.HasIndex("DashboardId", "UserId")
                        .IsUnique();

                    b.ToTable("DashboardUser", "Analytics");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.DashboardWidget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ChartType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataSource")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(300);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Width")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.HasKey("Id");

                    b.HasIndex("ChartType");

                    b.HasIndex("DashboardId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Position");

                    b.HasIndex("Title");

                    b.HasIndex("Type");

                    b.HasIndex("DashboardId", "IsActive");

                    b.HasIndex("DashboardId", "Position");

                    b.ToTable("DashboardWidget", "Analytics");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ExportFormats")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IsPublic");

                    b.HasIndex("IsSystem");

                    b.HasIndex("Name");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Type");

                    b.HasIndex("CreatedByUserId", "IsPublic");

                    b.HasIndex("Type", "IsPublic");

                    b.ToTable("Report", "Analytics");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Module", "Action")
                        .IsUnique();

                    b.ToTable("Permissions", "Auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.View",
                            NormalizedName = "WORKORDER.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Create",
                            NormalizedName = "WORKORDER.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Edit",
                            NormalizedName = "WORKORDER.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Delete",
                            NormalizedName = "WORKORDER.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Export",
                            NormalizedName = "WORKORDER.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Approve",
                            NormalizedName = "WORKORDER.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign workorders",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "WorkOrder",
                            Name = "WorkOrder.Assign",
                            NormalizedName = "WORKORDER.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.View",
                            NormalizedName = "USER.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Edit",
                            NormalizedName = "USER.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Export",
                            NormalizedName = "USER.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Approve",
                            NormalizedName = "USER.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign users",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "User",
                            Name = "User.Assign",
                            NormalizedName = "USER.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.View",
                            NormalizedName = "ROLE.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Edit",
                            NormalizedName = "ROLE.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Export",
                            NormalizedName = "ROLE.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Approve",
                            NormalizedName = "ROLE.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign roles",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Role",
                            Name = "Role.Assign",
                            NormalizedName = "ROLE.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.View",
                            NormalizedName = "HR.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Create",
                            NormalizedName = "HR.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Edit",
                            NormalizedName = "HR.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Delete",
                            NormalizedName = "HR.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Export",
                            NormalizedName = "HR.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Approve",
                            NormalizedName = "HR.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign hrs",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "HR",
                            Name = "HR.Assign",
                            NormalizedName = "HR.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.View",
                            NormalizedName = "EQUIPMENT.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Create",
                            NormalizedName = "EQUIPMENT.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Edit",
                            NormalizedName = "EQUIPMENT.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Delete",
                            NormalizedName = "EQUIPMENT.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Export",
                            NormalizedName = "EQUIPMENT.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Approve",
                            NormalizedName = "EQUIPMENT.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign equipments",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Equipment",
                            Name = "Equipment.Assign",
                            NormalizedName = "EQUIPMENT.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.View",
                            NormalizedName = "MATERIAL.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000037"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Create",
                            NormalizedName = "MATERIAL.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Edit",
                            NormalizedName = "MATERIAL.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Delete",
                            NormalizedName = "MATERIAL.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000040"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Export",
                            NormalizedName = "MATERIAL.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000041"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Approve",
                            NormalizedName = "MATERIAL.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign materials",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Material",
                            Name = "Material.Assign",
                            NormalizedName = "MATERIAL.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.View",
                            NormalizedName = "CLIENT.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Create",
                            NormalizedName = "CLIENT.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Edit",
                            NormalizedName = "CLIENT.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Delete",
                            NormalizedName = "CLIENT.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Export",
                            NormalizedName = "CLIENT.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            Action = "Approve",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to approve clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Approve",
                            NormalizedName = "CLIENT.APPROVE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000049"),
                            Action = "Assign",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to assign clients",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Client",
                            Name = "Client.Assign",
                            NormalizedName = "CLIENT.ASSIGN"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            Action = "View",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to view reports",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Report",
                            Name = "Report.View",
                            NormalizedName = "REPORT.VIEW"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000051"),
                            Action = "Create",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to create reports",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Report",
                            Name = "Report.Create",
                            NormalizedName = "REPORT.CREATE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000052"),
                            Action = "Edit",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to edit reports",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Report",
                            Name = "Report.Edit",
                            NormalizedName = "REPORT.EDIT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000053"),
                            Action = "Delete",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to delete reports",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Report",
                            Name = "Report.Delete",
                            NormalizedName = "REPORT.DELETE"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000054"),
                            Action = "Export",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Permission to export reports",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Report",
                            Name = "Report.Export",
                            NormalizedName = "REPORT.EXPORT"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000055"),
                            Action = "FullAccess",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Full access to all system features",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Module = "Admin",
                            Name = "Admin.FullAccess",
                            NormalizedName = "ADMIN.FULLACCESS"
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "Auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f43eb74-9db6-4128-a3e5-69bd3aff3d67"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Administrator role with full access",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Engineer role with technical permissions",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Engineer",
                            NormalizedName = "ENGINEER"
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Foreman role with supervision permissions",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Foreman",
                            NormalizedName = "FOREMAN"
                        },
                        new
                        {
                            Id = new Guid("4f511c53-efa7-4f35-a86c-ba3079493f3c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Worker role with basic permissions",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Worker",
                            NormalizedName = "WORKER"
                        },
                        new
                        {
                            Id = new Guid("5c77913c-eb6d-4a9f-9b3f-4b17c6d38a2d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Client role with limited permissions",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Description = "Coordinator role with management permissions",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            Name = "Coordinator",
                            NormalizedName = "COORDINATOR"
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-000000000053"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000053"),
                            RoleId = new Guid("1f43eb74-9db6-4128-a3e5-69bd3aff3d67")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c13"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c11"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c14"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c17"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c30"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000022"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c3b"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000029"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c27"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000035"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c24"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000036"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c25"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000037"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c2a"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000038"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c50"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000042"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c51"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000043"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c42"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000050"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c46"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000054"),
                            RoleId = new Guid("2a5db2e7-9170-4a5d-9065-c2b1f20d2c12")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736f"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e72897345"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000029"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e72897359"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000035"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289735a"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000036"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289735b"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000037"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289732e"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000042"),
                            RoleId = new Guid("3c3d5e29-43b9-4f0e-8d5a-6d5e7289736c")
                        },
                        new
                        {
                            Id = new Guid("4f511c53-efa7-4f35-a86c-ba3079493f3d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("4f511c53-efa7-4f35-a86c-ba3079493f3c")
                        },
                        new
                        {
                            Id = new Guid("4f511c53-efa7-4f35-a86c-ba3079493f0a"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000036"),
                            RoleId = new Guid("4f511c53-efa7-4f35-a86c-ba3079493f3c")
                        },
                        new
                        {
                            Id = new Guid("5c77913c-eb6d-4a9f-9b3f-4b17c6d38a2c"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("5c77913c-eb6d-4a9f-9b3f-4b17c6d38a2d")
                        },
                        new
                        {
                            Id = new Guid("5c77913c-eb6d-4a9f-9b3f-4b17c6d38a7d"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000050"),
                            RoleId = new Guid("5c77913c-eb6d-4a9f-9b3f-4b17c6d38a2d")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598253"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598250"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000002"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598251"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598255"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598257"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000005"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598270"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000022"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a59827a"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000028"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a59827b"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000029"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598262"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000030"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598263"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000031"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598267"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000035"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598264"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000036"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598265"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000037"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a59826a"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000038"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598210"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000042"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598211"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000043"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598216"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000044"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598217"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000045"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598202"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000050"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598203"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000051"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        },
                        new
                        {
                            Id = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598206"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PermissionId = new Guid("00000000-0000-0000-0000-000000000054"),
                            RoleId = new Guid("6d4c2c7c-cf19-4a33-8c5d-e9b68a598252")
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IsEmployee");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", "Auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7eb08e14-4e4c-4801-93e5-5d821bba7fd2"),
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Email = "admin@unifiedcontract.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmployee = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system",
                            PasswordHash = "AQAAAAIAAYagAAAAELbXp1J2NwQxX8K8QxX8K8QxX8K8QxX8K8QxX8K8QxX8K8QxX8QxX8K8Q==",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Email = "testuser@example.com",
                            FullName = "Test User",
                            IsActive = true,
                            IsDeleted = false,
                            IsEmployee = false,
                            LastModifiedBy = "seed",
                            PasswordHash = "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4",
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId");

                    b.ToTable("UserRoles", "Auth");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7eb08e14-4e4c-4801-93e5-5d821bba7fd2"),
                            RoleId = new Guid("1f43eb74-9db6-4128-a3e5-69bd3aff3d67"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "system",
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "system"
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Client.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("AccountManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternatePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CompanyName");

                    b.HasIndex("Email");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.HasIndex("VatNumber");

                    b.HasIndex("CompanyName", "IsActive");

                    b.HasIndex("Name", "IsActive");

                    b.ToTable("Client", "Client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AlternatePhone = "0987654321",
                            CompanyName = "Demo Company",
                            ContactPerson = "John Doe",
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Email = "demo.client@example.com",
                            Industry = "Construction",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            LogoUrl = "",
                            Name = "Demo Client",
                            Notes = "Seeded client for demo work orders",
                            Phone = "1234567890",
                            VatNumber = "VAT123456",
                            Website = "www.demo.com"
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Client.ClientContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AlternatePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("Email");

                    b.HasIndex("IsPrimaryContact");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.HasIndex("ClientId", "Email");

                    b.HasIndex("ClientId", "IsPrimaryContact");

                    b.ToTable("ClientContact", "Client");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Common.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityType");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityType", "EntityId");

                    b.ToTable("ActivityLogs", "Common");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Common.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("FileType");

                    b.HasIndex("UploadDate");

                    b.HasIndex("UploadedById");

                    b.HasIndex("UploadDate", "UploadedById");

                    b.ToTable("Attachments", "Common");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Common.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("UserId");

                    b.HasIndex("EntityId", "EntityType");

                    b.HasIndex("UserId", "IsRead");

                    b.ToTable("Notifications", "Common");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Document.DocumentTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ContentType");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("Name");

                    b.HasIndex("Type");

                    b.HasIndex("Name", "Version");

                    b.HasIndex("Type", "IsActive");

                    b.ToTable("DocumentTemplate", "Document");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Allowance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsTaxable");

                    b.HasIndex("SalaryId");

                    b.HasIndex("Type");

                    b.ToTable("Allowances", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("CheckInLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckOutLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<TimeSpan?>("EarlyDepartureMinutes")
                        .HasPrecision(5, 2)
                        .HasColumnType("time(5)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAbsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHalfDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOnLeave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("LateMinutes")
                        .HasPrecision(5, 2)
                        .HasColumnType("time(5)");

                    b.Property<Guid?>("LeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("OvertimeHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("time(5)");

                    b.Property<TimeSpan?>("WorkingHours")
                        .HasPrecision(5, 2)
                        .HasColumnType("time(5)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IsAbsent");

                    b.HasIndex("IsHalfDay");

                    b.HasIndex("IsOnLeave");

                    b.HasIndex("LeaveId");

                    b.HasIndex("Date", "IsAbsent");

                    b.HasIndex("EmployeeId", "Date")
                        .IsUnique();

                    b.ToTable("Attendances", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SwiftCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber");

                    b.HasIndex("BankName");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IBAN");

                    b.HasIndex("IsPrimary");

                    b.HasIndex("EmployeeId", "IsPrimary");

                    b.ToTable("BankAccounts", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("IssueDate");

                    b.HasIndex("Issuer");

                    b.HasIndex("Verified");

                    b.ToTable("Certificates", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Deduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsMandatory");

                    b.HasIndex("SalaryId");

                    b.HasIndex("Type");

                    b.ToTable("Deductions", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeadCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Degree");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FieldOfStudy");

                    b.HasIndex("Institution");

                    b.HasIndex("EmployeeId", "IsVerified");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Educations", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.EmergencyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryContact")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SecondaryPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IsPrimaryContact");

                    b.HasIndex("Name");

                    b.HasIndex("Relationship");

                    b.HasIndex("EmployeeId", "IsPrimaryContact");

                    b.HasIndex("EmployeeId", "Name")
                        .IsUnique();

                    b.ToTable("EmergencyContacts", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<double>("AvgLateMinutes")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.Property<string>("BadgeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrentProject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DirectManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IqamaNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MonthlyHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OffDays")
                        .HasColumnType("int");

                    b.Property<string>("PersonalPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SickLeaveCounter")
                        .HasColumnType("int");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("WorkTimeRatio")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)");

                    b.HasKey("Id");

                    b.HasIndex("BadgeNumber")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DirectManagerId");

                    b.HasIndex("IqamaNumber");

                    b.HasIndex("JobTitle");

                    b.HasIndex("JoinDate");

                    b.HasIndex("Name");

                    b.HasIndex("Nationality");

                    b.HasIndex("WorkLocation");

                    b.ToTable("Employees", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IsFeatured");

                    b.HasIndex("LastUsedDate");

                    b.HasIndex("ProficiencyLevel");

                    b.HasIndex("SkillId");

                    b.HasIndex("EmployeeId", "SkillId")
                        .IsUnique();

                    b.ToTable("EmployeeSkills", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Identification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuingCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpiryDate");

                    b.HasIndex("IssueDate");

                    b.HasIndex("IssuingCountry");

                    b.HasIndex("Number");

                    b.HasIndex("Type");

                    b.HasIndex("Type", "Number")
                        .IsUnique();

                    b.ToTable("Identifications", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TotalDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndDate");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("EmployeeId", "Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Leaves", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.PerformanceCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PerformanceReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("PerformanceReviewId");

                    b.HasIndex("Rating");

                    b.ToTable("PerformanceCriteria", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.PerformanceReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoalsForNextPeriod")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ManagerComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OverallRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReviewPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Draft");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrainingRecommendations")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CompletionDate");

                    b.HasIndex("DueDate");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OverallRating");

                    b.HasIndex("ReviewPeriodEnd");

                    b.HasIndex("ReviewPeriodStart");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("Status");

                    b.ToTable("PerformanceReviews", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EffectiveDate");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsActive");

                    b.HasIndex("EffectiveDate", "EndDate");

                    b.HasIndex("EmployeeId", "EffectiveDate");

                    b.HasIndex("EmployeeId", "IsActive");

                    b.ToTable("Salaries", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Skills", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("SAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndDate");

                    b.HasIndex("Provider");

                    b.HasIndex("Score");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("Title");

                    b.HasIndex("EmployeeId", "Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Trainings", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Achievements")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactReferenceEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactReferencePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrentEmployer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReasonForLeaving")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyName");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IsCurrentEmployer");

                    b.HasIndex("Position");

                    b.HasIndex("EmployeeId", "IsCurrentEmployer");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("WorkExperiences", "HR");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ClientMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialMasterCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SEQ")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MaterialMasterCode");

                    b.HasIndex("ClientId", "MaterialMasterCode")
                        .IsUnique();

                    b.ToTable("ClientMaterials", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOperatorId");

                    b.HasIndex("EquipmentStatusId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.EquipmentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OperatorId");

                    b.HasIndex("StartDate");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("EquipmentAssignment", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.EquipmentMaintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("SAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("MaintenanceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaintenanceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("PerformedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompletedDate");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MaintenanceStatusId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("PerformedById");

                    b.HasIndex("ScheduledDate");

                    b.HasIndex("EquipmentId", "ScheduledDate");

                    b.ToTable("EquipmentMaintenance", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.EquipmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentStatus");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowsEditing")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalState")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceStatus");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresOutOfService")
                        .HasColumnType("bit");

                    b.Property<int?>("TypicalDurationHours")
                        .HasColumnType("int");

                    b.Property<int?>("TypicalIntervalDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceType");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("HasCost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceivable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresTracking")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.SupplierCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SupplierCategory");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ManpowerAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("BadgeNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoursAssigned")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BadgeNumber");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndDate");

                    b.HasIndex("Name");

                    b.HasIndex("Role");

                    b.HasIndex("StartDate");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("EmployeeId", "StartDate");

                    b.HasIndex("WorkOrderId", "StartDate");

                    b.ToTable("ManpowerAssignment", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.MaterialAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AssignedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("PurchasableMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ReceivableMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StoringLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Units");

                    b.Property<Guid?>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AssignDate");

                    b.HasIndex("AssignedById");

                    b.HasIndex("MaterialType");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("PurchasableMaterialId");

                    b.HasIndex("ReceivableMaterialId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("MaterialType", "AssignDate");

                    b.HasIndex("WorkOrderId", "AssignDate");

                    b.ToTable("MaterialAssignment", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.PurchasableMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Units");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDate");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("OrderDate");

                    b.HasIndex("Status");

                    b.HasIndex("SupplierId");

                    b.HasIndex("Status", "MaterialTypeId");

                    b.HasIndex("SupplierId", "Status");

                    b.ToTable("PurchasableMaterial", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ReceivableMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<decimal?>("ActualQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ClientMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("EstimatedQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ReceivedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RemainingQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ReturnedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ReturnedQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SourceLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientMaterialId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("ReturnedById");

                    b.HasIndex("Status");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("ReceivableMaterials", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AlternatePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<Guid?>("SupplierCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VatNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Email");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.HasIndex("SupplierCategoryId");

                    b.HasIndex("VatNumber");

                    b.HasIndex("Email", "IsActive");

                    b.HasIndex("Name", "IsActive");

                    b.ToTable("Supplier", "Resource");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.ActionNeeded", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkOrderId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CompletedById");

                    b.HasIndex("PriorityLevelId");

                    b.HasIndex("WorkOrderId");

                    b.HasIndex("WorkOrderId1");

                    b.ToTable("ActionNeeded");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresImmediateNotification")
                        .HasColumnType("bit");

                    b.Property<int>("SeverityValue")
                        .HasColumnType("int");

                    b.Property<int?>("TargetResponseHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriorityLevel");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "NORMAL",
                            ColorCode = "#2196F3",
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "Normal priority.",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Metadata = "",
                            Name = "Normal",
                            RequiresImmediateNotification = false,
                            SeverityValue = 2,
                            TargetResponseHours = 48
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Code = "HIGH",
                            ColorCode = "#F44336",
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "High priority.",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Metadata = "",
                            Name = "High",
                            RequiresImmediateNotification = true,
                            SeverityValue = 4,
                            TargetResponseHours = 8
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Lookups.WorkOrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowsEditing")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AllowsEditing = true,
                            Code = "PENDING",
                            ColorCode = "#FFA500",
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "Work order is pending.",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsCompleted = false,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Metadata = "",
                            Name = "Pending",
                            RequiresApproval = false
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AllowsEditing = false,
                            Code = "COMPLETED",
                            ColorCode = "#4CAF50",
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "Work order is completed.",
                            DisplayOrder = 0,
                            IsActive = true,
                            IsCompleted = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Metadata = "",
                            Name = "Completed",
                            RequiresApproval = false
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Permit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Authority")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DocumentRef")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("Permits");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("ActualQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ForemanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ForemanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkDone")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("SiteReports");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReportMaterialUsed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MaterialAssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SiteReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAssignmentId");

                    b.HasIndex("SiteReportId");

                    b.ToTable("SiteReportMaterialsUsed");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReportPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SiteReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SiteReportId");

                    b.ToTable("SiteReportPhotos");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CompletionPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EngineerInChargeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InternalOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("LaborExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("MaterialsExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PriorityLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TargetEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("WorkOrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EngineerInChargeId");

                    b.HasIndex("PriorityLevelId");

                    b.HasIndex("WorkOrderStatusId");

                    b.ToTable("WorkOrders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Category = "Electrical",
                            Class = "A",
                            ClientId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CompletionPercentage = 0m,
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "Demo work order for testing.",
                            DueDate = new DateTime(2024, 7, 25, 17, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedCost = 1000m,
                            InternalOrderNumber = "INT-1001",
                            IsDeleted = false,
                            LaborExpense = 300m,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Location = "Riyadh",
                            MaterialsExpense = 200m,
                            OtherExpense = 50m,
                            PriorityLevelId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ReceivedDate = new DateTime(2024, 7, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2024, 7, 16, 8, 0, 0, 0, DateTimeKind.Utc),
                            TargetEndDate = new DateTime(2024, 7, 27, 17, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Demo Work Order 1",
                            Type = "Project",
                            WorkOrderNumber = "WO-1001",
                            WorkOrderStatusId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Category = "Mechanical",
                            Class = "B",
                            ClientId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CompletionPercentage = 100m,
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Description = "Second demo work order.",
                            DueDate = new DateTime(2024, 7, 18, 17, 0, 0, 0, DateTimeKind.Utc),
                            EstimatedCost = 2500m,
                            InternalOrderNumber = "INT-1002",
                            IsDeleted = false,
                            LaborExpense = 800m,
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            Location = "Jeddah",
                            MaterialsExpense = 500m,
                            OtherExpense = 100m,
                            PriorityLevelId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ReceivedDate = new DateTime(2024, 7, 10, 12, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2024, 7, 11, 8, 0, 0, 0, DateTimeKind.Utc),
                            TargetEndDate = new DateTime(2024, 7, 19, 17, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Demo Work Order 2",
                            Type = "Maintenance",
                            WorkOrderNumber = "WO-1002",
                            WorkOrderStatusId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriorityLevelId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderActions");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receipt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubmittedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderExpenses");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubmittedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderForms");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PaidById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderInvoices");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolutionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriorityLevelId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderIssues");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ActualPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualPriceWithVAT")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("EstimatedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedPriceWithVAT")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedQuantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ManagementArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForFinalQuantity")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            ActualPrice = 1000m,
                            ActualPriceWithVAT = 1150m,
                            ActualQuantity = 10m,
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Currency = "SAR",
                            Description = "Concrete Mix - Grade 30 for foundation work",
                            EstimatedPrice = 1000m,
                            EstimatedPriceWithVAT = 1150m,
                            EstimatedQuantity = 10m,
                            IsDeleted = false,
                            ItemNumber = "WOI-1001-001",
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            ManagementArea = "Default Area",
                            PaymentType = "Fixed Price",
                            ReasonForFinalQuantity = "Used as planned",
                            Unit = "m³",
                            UnitPrice = 100m,
                            WorkOrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            ActualPrice = 600m,
                            ActualPriceWithVAT = 690m,
                            ActualQuantity = 5m,
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Currency = "SAR",
                            Description = "Steel Bars - 12mm for structural support",
                            EstimatedPrice = 600m,
                            EstimatedPriceWithVAT = 690m,
                            EstimatedQuantity = 5m,
                            IsDeleted = false,
                            ItemNumber = "WOI-1001-002",
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            ManagementArea = "Default Area",
                            PaymentType = "Fixed Price",
                            ReasonForFinalQuantity = "Used as planned",
                            Unit = "ton",
                            UnitPrice = 120m,
                            WorkOrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            ActualPrice = 2500m,
                            ActualPriceWithVAT = 2875m,
                            ActualQuantity = 2m,
                            CreatedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = "seed",
                            Currency = "SAR",
                            Description = "Electrical Wiring - 2.5mm² for power distribution",
                            EstimatedPrice = 2500m,
                            EstimatedPriceWithVAT = 2875m,
                            EstimatedQuantity = 2m,
                            IsDeleted = false,
                            ItemNumber = "WOI-1002-001",
                            LastModifiedAt = new DateTime(2024, 7, 20, 12, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedBy = "seed",
                            ManagementArea = "Default Area",
                            PaymentType = "Fixed Price",
                            ReasonForFinalQuantity = "Used as planned",
                            Unit = "m",
                            UnitPrice = 1250m,
                            WorkOrderId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        });
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderPhotos");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderRemark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("PeopleInvolved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderRemarks");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ConfirmedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriorityLevelId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderTasks");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.Dashboard", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.DashboardUser", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Analytics.Dashboard", "Dashboard")
                        .WithMany("DashboardUsers")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.DashboardWidget", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Analytics.Dashboard", "Dashboard")
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.Report", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.Document.DocumentTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.Permission", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.RolePermission", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.UserRole", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Client.Client", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("UnifiedContract.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("FormattedAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Street");

                            b1.HasKey("ClientId");

                            b1.ToTable("Client", "Client");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.HasData(
                                new
                                {
                                    ClientId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                                    City = "Riyadh",
                                    Country = "Saudi Arabia",
                                    FormattedAddress = "Demo Street, Riyadh, Riyadh 12345, Saudi Arabia",
                                    PostalCode = "12345",
                                    State = "Riyadh",
                                    Street = "Demo Street"
                                });
                        });

                    b.Navigation("AccountManager");

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Client.ClientContact", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Client.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Common.Attachment", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Common.Notification", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Document.DocumentTemplate", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Allowance", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Salary", "Salary")
                        .WithMany("Allowances")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Attendance", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Leave", "Leave")
                        .WithMany()
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");

                    b.Navigation("Leave");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.BankAccount", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("BankAccounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Certificate", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Deduction", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Salary", "Salary")
                        .WithMany("Deductions")
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Department", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("Manager");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Education", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("EducationHistory")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.EmergencyContact", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UnifiedContract.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EmergencyContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("AddressCountry");

                            b1.Property<string>("FormattedAddress")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("AddressFormattedAddress");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("AddressLatitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("AddressLongitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("AddressState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("AddressStreet");

                            b1.HasKey("EmergencyContactId");

                            b1.ToTable("EmergencyContacts", "HR");

                            b1.WithOwner()
                                .HasForeignKey("EmergencyContactId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Employee", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "DirectManager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("DirectManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("UnifiedContract.Domain.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("HomeCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("HomeCountry");

                            b1.Property<string>("FormattedAddress")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("HomeFormattedAddress");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("HomeLatitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("HomeLongitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("HomePostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("HomeState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("HomeStreet");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees", "HR");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.OwnsOne("UnifiedContract.Domain.ValueObjects.Money", "Salary", b1 =>
                        {
                            b1.Property<Guid>("EmployeeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SalaryAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("SAR")
                                .HasColumnName("SalaryCurrency");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees", "HR");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Department");

                    b.Navigation("DirectManager");

                    b.Navigation("HomeAddress")
                        .IsRequired();

                    b.Navigation("Salary")
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.EmployeeSkill", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Skill", "Skill")
                        .WithMany("EmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Identification", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Identifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Leave", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.PerformanceCriteria", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.PerformanceReview", "PerformanceReview")
                        .WithMany("PerformanceCriteria")
                        .HasForeignKey("PerformanceReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformanceReview");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.PerformanceReview", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("PerformanceReviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Reviewer")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Salary", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("SalaryHistory")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Training", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("Trainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.WorkExperience", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ClientMaterial", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Client.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Equipment", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "CurrentOperator")
                        .WithMany()
                        .HasForeignKey("CurrentOperatorId");

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.EquipmentStatus", "Status")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Supplier", "Supplier")
                        .WithMany("Equipment")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CurrentOperator");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.EquipmentAssignment", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Equipment", "Equipment")
                        .WithMany("Assignments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Operator");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.EquipmentMaintenance", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Equipment", "Equipment")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceStatus", "Status")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("MaintenanceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceType", "Type")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "PerformedBy")
                        .WithMany()
                        .HasForeignKey("PerformedById");

                    b.Navigation("Equipment");

                    b.Navigation("PerformedBy");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ManpowerAssignment", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.MaterialAssignment", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "AssignedBy")
                        .WithMany()
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.MaterialType", null)
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId");

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.PurchasableMaterial", "PurchasableMaterial")
                        .WithMany()
                        .HasForeignKey("PurchasableMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.ReceivableMaterial", "ReceivableMaterial")
                        .WithMany()
                        .HasForeignKey("ReceivableMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedBy");

                    b.Navigation("PurchasableMaterial");

                    b.Navigation("ReceivableMaterial");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.PurchasableMaterial", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Supplier", "Supplier")
                        .WithMany("Materials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MaterialType");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ReceivableMaterial", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.ClientMaterial", "ClientMaterial")
                        .WithMany("ReceivableMaterials")
                        .HasForeignKey("ClientMaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.HR.Employee", "ReturnedBy")
                        .WithMany()
                        .HasForeignKey("ReturnedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClientMaterial");

                    b.Navigation("MaterialType");

                    b.Navigation("ReceivedBy");

                    b.Navigation("ReturnedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Supplier", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.SupplierCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UnifiedContract.Domain.Entities.Resource.Lookups.SupplierCategory", null)
                        .WithMany("Suppliers")
                        .HasForeignKey("SupplierCategoryId");

                    b.OwnsOne("UnifiedContract.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SupplierId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country");

                            b1.Property<string>("FormattedAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("State");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Street");

                            b1.HasKey("SupplierId");

                            b1.ToTable("Supplier", "Resource");

                            b1.WithOwner()
                                .HasForeignKey("SupplierId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.ActionNeeded", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "CompletedBy")
                        .WithMany()
                        .HasForeignKey("CompletedById");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", null)
                        .WithMany("ActionsNeeded")
                        .HasForeignKey("PriorityLevelId");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("ActionsNeeded")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CompletedBy");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Permit", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Permits")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReport", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", "WorkOrder")
                        .WithMany("SiteReports")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReportMaterialUsed", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Resource.MaterialAssignment", "MaterialAssignment")
                        .WithMany()
                        .HasForeignKey("MaterialAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.SiteReport", "SiteReport")
                        .WithMany("MaterialsUsed")
                        .HasForeignKey("SiteReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialAssignment");

                    b.Navigation("SiteReport");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReportPhoto", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.SiteReport", "SiteReport")
                        .WithMany("Photos")
                        .HasForeignKey("SiteReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteReport");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.Client.Client", "Client")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UnifiedContract.Domain.Entities.Auth.User", "EngineerInCharge")
                        .WithMany()
                        .HasForeignKey("EngineerInChargeId");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", "Priority")
                        .WithMany("WorkOrders")
                        .HasForeignKey("PriorityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.WorkOrderStatus", "Status")
                        .WithMany("WorkOrders")
                        .HasForeignKey("WorkOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("EngineerInCharge");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderAction", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", null)
                        .WithMany("Actions")
                        .HasForeignKey("PriorityLevelId");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Actions")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderExpense", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Expenses")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderForm", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Forms")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderInvoice", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Invoices")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderIssue", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", null)
                        .WithMany("Issues")
                        .HasForeignKey("PriorityLevelId");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Issues")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderItem", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderPhoto", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Photos")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderRemark", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Remarks")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrderTask", b =>
                {
                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", null)
                        .WithMany("Tasks")
                        .HasForeignKey("PriorityLevelId");

                    b.HasOne("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", null)
                        .WithMany("Tasks")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Analytics.Dashboard", b =>
                {
                    b.Navigation("DashboardUsers");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Client.Client", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Department", b =>
                {
                    b.Navigation("ChildDepartments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("BankAccounts");

                    b.Navigation("Certificates");

                    b.Navigation("EducationHistory");

                    b.Navigation("EmergencyContacts");

                    b.Navigation("Identifications");

                    b.Navigation("Leaves");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("ManagedEmployees");

                    b.Navigation("PerformanceReviews");

                    b.Navigation("ReviewsGiven");

                    b.Navigation("SalaryHistory");

                    b.Navigation("Skills");

                    b.Navigation("Trainings");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.PerformanceReview", b =>
                {
                    b.Navigation("PerformanceCriteria");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Salary", b =>
                {
                    b.Navigation("Allowances");

                    b.Navigation("Deductions");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.HR.Skill", b =>
                {
                    b.Navigation("EmployeeSkills");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.ClientMaterial", b =>
                {
                    b.Navigation("ReceivableMaterials");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Equipment", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.EquipmentStatus", b =>
                {
                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceStatus", b =>
                {
                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaintenanceType", b =>
                {
                    b.Navigation("MaintenanceRecords");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Lookups.SupplierCategory", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.Resource.Supplier", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Lookups.PriorityLevel", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ActionsNeeded");

                    b.Navigation("Issues");

                    b.Navigation("Tasks");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.Lookups.WorkOrderStatus", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.SiteReport", b =>
                {
                    b.Navigation("MaterialsUsed");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("UnifiedContract.Domain.Entities.WorkOrder.WorkOrder", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ActionsNeeded");

                    b.Navigation("Expenses");

                    b.Navigation("Forms");

                    b.Navigation("Invoices");

                    b.Navigation("Issues");

                    b.Navigation("Items");

                    b.Navigation("Permits");

                    b.Navigation("Photos");

                    b.Navigation("Remarks");

                    b.Navigation("SiteReports");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
